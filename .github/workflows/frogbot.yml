name: "Frogbot Security Scan"

on:
  pull_request_target: 
    types: [opened, synchronize] # Triggers scan-pr flow for every opened/updated pull request
  push: # Triggers scan-repo flow for every push to the specified branches
    branches:
      - main
  schedule:
    - cron: "0 0 * * *"   # The repository will be scanned once a day at 00:00 GMT.
  workflow_dispatch: # The repository will be scanned on demand

permissions:
  pull-requests: write
  contents: write
  security-events: write
  # [Mandatory If using OIDC authentication protocol instead of JF_ACCESS_TOKEN]
  # id-token: write

jobs:
  frogbot-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # The repository scanning will be triggered periodically on the following branches.
        branch: ["master"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:  
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
          
      - name: Setup Dependencies
        run: |
          # Configure npm for root directory
          jf npm-config --global=true --repo-resolve=dylanmo-npm --repo-deploy=dylanmo-npm
          jf npm install --ignore-scripts --legacy-peer-deps
          
          # Configure npm for frontend directory  
          cd frontend
          jf npm-config --repo-resolve=dylanmo-npm --repo-deploy=dylanmo-npm
          jf npm install --ignore-scripts --legacy-peer-deps
          
      - name: Generate Package Lock Files
        run: |
          # Generate package-lock.json for root directory using JFrog Artifactory
          jf npm install --package-lock-only --ignore-scripts
          
          # Generate package-lock.json for frontend directory with legacy peer deps using JFrog Artifactory
          cd frontend
          jf npm install --package-lock-only --ignore-scripts --legacy-peer-deps
          
      - uses: jfrog/frogbot@v2
        # [Mandatory if using OIDC authentication protocol instead of JF_ACCESS_TOKEN]
        # Insert to oidc-provider-name the 'Provider Name' defined in the OIDC integration configured in the JPD
        # with:
        #   oidc-provider-name: ""
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JF_GIT_BASE_BRANCH: ${{ matrix.branch }}    # For repository scan action
          JF_INSTALL_DEPS_COMMAND: "echo 'Dependencies already installed in previous step'"
